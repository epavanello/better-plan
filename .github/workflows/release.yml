name: Release

on:
  push:
    branches:
    - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: latest

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Determine version bump
      id: version_bump
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
        else
          # Analyze commit messages for conventional commits
          COMMITS=$(git log --pretty=format:"%s" $(git describe --tags --abbrev=0)..HEAD 2>/dev/null || git log --pretty=format:"%s")
          
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|feat!:"; then
            VERSION_TYPE="major"
          elif echo "$COMMITS" | grep -q "feat:"; then
            VERSION_TYPE="minor"
          else
            VERSION_TYPE="patch"
          fi
        fi

        echo "type=$VERSION_TYPE" >> $GITHUB_OUTPUT

    - name: Bump version
      id: bump_version
      run: |
        npm version ${{ steps.version_bump.outputs.type }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)")
        fi

        {
          echo "changelog<<EOF"
          echo "## Changes in v${{ steps.bump_version.outputs.version }}"
          echo ""
          echo "$COMMITS"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Commit version bump
      run: |
        git add package.json
        git commit -m "chore: bump version to v${{ steps.bump_version.outputs.version }}"
        git push

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump_version.outputs.version }}
        release_name: Release v${{ steps.bump_version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Release v${{ steps.bump_version.outputs.version }} has been created!'
          }) 
